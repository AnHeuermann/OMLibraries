diff -u -x .svn -r libraries/Modelica 3.2.1/Modelica/Mechanics/MultiBody/package.mo build/Modelica 3.2.1/Mechanics/MultiBody/package.mo
--- libraries/Modelica 3.2.1/Modelica/Mechanics/MultiBody/package.mo	2013-04-13 03:29:10.867372471 +0200
+++ build/Modelica 3.2.1/Mechanics/MultiBody/package.mo	2013-05-14 17:43:21.325050310 +0200
@@ -1231,6 +1231,7 @@
     "Default scaling of torque arrows (length = torque/defaultNm_to_m)"
     annotation (Dialog(tab="Defaults"));
 
+  /* adrpo: 2012-09-04 -> replace gravityAcceleration function with the one in MSL 3.1 (not replaceable)
   replaceable function gravityAcceleration =
        Modelica.Mechanics.MultiBody.Forces.Internal.standardGravityAcceleration
       (    gravityType=gravityType, g=g*Modelica.Math.Vectors.normalizeWithAssert(n), mue=mue)
@@ -1249,6 +1250,38 @@
      <a href=\"modelica://Modelica.Mechanics.MultiBody.Examples.Elementary.UserDefinedGravityField\">Examples.Elementary.UserDefinedGravityField</a>.
 </p>
 </html>"));
+*/
+
+function gravityAcceleration = gravityAccelerationTypes (
+      gravityType=gravityType,
+      g=g*Modelica.Math.Vectors.normalize(
+                                     n),
+      mue=mue);
+
+protected
+  function gravityAccelerationTypes
+    "Gravity field acceleration depending on field type and position"
+    import Modelica.Mechanics.MultiBody.Types.GravityTypes;
+    extends Modelica.Icons.Function;
+    input SI.Position r[3]
+      "Position vector from world frame to actual point, resolved in world frame";
+    input GravityTypes gravityType "Type of gravity field";
+    input SI.Acceleration g[3]
+      "Constant gravity acceleration, resolved in world frame, if gravityType=1";
+    input Real mue(unit="m3/s2")
+      "Field constant of point gravity field, if gravityType=2";
+    output SI.Acceleration gravity[3]
+      "Gravity acceleration at point r, resolved in world frame";
+  algorithm
+    gravity := if gravityType == GravityTypes.UniformGravity then g else
+               if gravityType == GravityTypes.PointGravity then
+                  -(mue/(r*r))*(r/Modelica.Math.Vectors.length(
+                                                r)) else
+                    zeros(3);
+    annotation(Inline=true);          
+  end gravityAccelerationTypes;
+
+
 
   /* The World object can only use the Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape model, but no
      other models in package Modelica.Mechanics.MultiBody.Visualizers, since the other models access
diff -u -x .svn -r libraries/Modelica 3.2.1/Modelica/Media/Water/IF97_Utilities.mo build/Modelica 3.2.1/Media/Water/IF97_Utilities.mo
--- libraries/Modelica 3.2.1/Modelica/Media/Water/IF97_Utilities.mo	2013-04-13 03:29:10.623371263 +0200
+++ build/Modelica 3.2.1/Media/Water/IF97_Utilities.mo	2013-05-14 17:43:21.325050310 +0200
@@ -6866,7 +6866,7 @@
     aux.region := if region == 0 then BaseIF97.Regions.region_pT(p=p,T= T) else region;
     aux.R := BaseIF97.data.RH2O;
     aux.p := p;
-    aux.T := T;
+    aux.T := T; /* OpenModelica patch */ aux.dpT := 0.0; aux.pt := 0.0; aux.pd := 0.0; aux.x := 0.0; aux.rho := 0.0; aux.vt := 0.0; aux.vp := 0.0; aux.cp := 0.0; /* end OpenModelica patch */
     if (aux.region == 1) then
       g := BaseIF97.Basic.g1(p, T);
       aux.h := aux.R*aux.T*g.tau*g.gtau;
