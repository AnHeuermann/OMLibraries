diff -u -x .svn -r libraries/Modelica 3.2.1/Modelica/Blocks/Sources.mo build/Modelica 3.2.1/Blocks/Sources.mo
--- libraries/Modelica 3.2.1/Modelica/Blocks/Sources.mo	2013-05-29 09:28:21.411157516 +0200
+++ build/Modelica 3.2.1/Blocks/Sources.mo	2013-05-29 12:17:11.071416886 +0200
@@ -2137,7 +2137,7 @@
       input Boolean forceRead = false "= true: Force reading of table data; = false: Only read, if not yet read.";
       output Real readSuccess "Table read success";
     external"C" readSuccess = ModelicaStandardTables_CombiTimeTable_read(
-        tableID, forceRead) annotation (Library={"ModelicaStandardTables", "ModelicaExternalC"});
+        tableID, forceRead) annotation (Library={"ModelicaExternalC"});
     end readTableData;
 
     function getTableValue
@@ -2148,14 +2148,14 @@
       input Modelica.SIunits.Time timeIn;
       discrete input Modelica.SIunits.Time nextTimeEvent;
       discrete input Modelica.SIunits.Time pre_nextTimeEvent;
-      input Real tableAvailable "Dummy input to ensure correct sorting of function calls";
+      input Real tableAvailable "Dummy input to ensure correct sorting of function calls" annotation(__OpenModelica_UnusedVariable=true);
       output Real y;
     external"C" y = ModelicaStandardTables_CombiTimeTable_getValue(
             tableID,
             icol,
             timeIn,
             nextTimeEvent,
-            pre_nextTimeEvent) annotation (Library={"ModelicaStandardTables", "ModelicaExternalC"});
+            pre_nextTimeEvent) annotation (Library={"ModelicaExternalC"});
       annotation (derivative(
           noDerivative=nextTimeEvent,
           noDerivative=pre_nextTimeEvent,
@@ -2170,7 +2170,7 @@
       input Modelica.SIunits.Time timeIn;
       discrete input Modelica.SIunits.Time nextTimeEvent;
       discrete input Modelica.SIunits.Time pre_nextTimeEvent;
-      input Real tableAvailable "Dummy input to ensure correct sorting of function calls";
+      input Real tableAvailable "Dummy input to ensure correct sorting of function calls" annotation(__OpenModelica_UnusedVariable=true);
       input Real der_timeIn;
       output Real der_y;
     external"C" der_y = ModelicaStandardTables_CombiTimeTable_getDerValue(
@@ -2179,27 +2179,27 @@
             timeIn,
             nextTimeEvent,
             pre_nextTimeEvent,
-            der_timeIn) annotation (Library={"ModelicaStandardTables", "ModelicaExternalC"});
+            der_timeIn) annotation (Library={"ModelicaExternalC"});
     end getDerTableValue;
 
     function getTableTimeTmin
       "Return minimum time value of 1-dim. table where first column is time"
       extends Modelica.Icons.Function;
       input Modelica.Blocks.Types.ExternalCombiTimeTable tableID;
-      input Real tableAvailable "Dummy input to ensure correct sorting of function calls";
+      input Real tableAvailable "Dummy input to ensure correct sorting of function calls" annotation(__OpenModelica_UnusedVariable=true);
       output Modelica.SIunits.Time timeMin "Minimum time value in table";
     external"C" timeMin = ModelicaStandardTables_CombiTimeTable_minimumTime(
-        tableID) annotation (Library={"ModelicaStandardTables", "ModelicaExternalC"});
+        tableID) annotation (Library={"ModelicaExternalC"});
     end getTableTimeTmin;
 
     function getTableTimeTmax
       "Return maximum time value of 1-dim. table where first column is time"
       extends Modelica.Icons.Function;
       input Modelica.Blocks.Types.ExternalCombiTimeTable tableID;
-      input Real tableAvailable "Dummy input to ensure correct sorting of function calls";
+      input Real tableAvailable "Dummy input to ensure correct sorting of function calls" annotation(__OpenModelica_UnusedVariable=true);
       output Modelica.SIunits.Time timeMax "Maximum time value in table";
     external"C" timeMax = ModelicaStandardTables_CombiTimeTable_maximumTime(
-        tableID) annotation (Library={"ModelicaStandardTables", "ModelicaExternalC"});
+        tableID) annotation (Library={"ModelicaExternalC"});
     end getTableTimeTmax;
 
     function getNextTimeEvent
@@ -2207,11 +2207,11 @@
       extends Modelica.Icons.Function;
       input Modelica.Blocks.Types.ExternalCombiTimeTable tableID;
       input Modelica.SIunits.Time timeIn;
-      input Real tableAvailable "Dummy input to ensure correct sorting of function calls";
+      input Real tableAvailable "Dummy input to ensure correct sorting of function calls" annotation(__OpenModelica_UnusedVariable=true);
       output Modelica.SIunits.Time nextTimeEvent "Next time event in table";
     external"C" nextTimeEvent =
         ModelicaStandardTables_CombiTimeTable_nextTimeEvent(tableID, timeIn)
-        annotation (Library={"ModelicaStandardTables", "ModelicaExternalC"});
+        annotation (Library={"ModelicaExternalC"});
     end getNextTimeEvent;
 
   initial algorithm
diff -u -x .svn -r libraries/Modelica 3.2.1/Modelica/Blocks/Tables.mo build/Modelica 3.2.1/Blocks/Tables.mo
--- libraries/Modelica 3.2.1/Modelica/Blocks/Tables.mo	2013-05-29 09:28:21.407157516 +0200
+++ build/Modelica 3.2.1/Blocks/Tables.mo	2013-05-29 12:21:25.335423396 +0200
@@ -44,7 +44,7 @@
       input Boolean forceRead = false "= true: Force reading of table data; = false: Only read, if not yet read.";
       output Real readSuccess "Table read success";
     external"C" readSuccess = ModelicaStandardTables_CombiTable1D_read(tableID,
-        forceRead) annotation (Library={"ModelicaStandardTables", "ModelicaExternalC"});
+        forceRead) annotation (Library={"ModelicaExternalC"});
     end readTableData;
 
     function getTableValue "Interpolate 1-dim. table defined by matrix"
@@ -52,12 +52,12 @@
       input Modelica.Blocks.Types.ExternalCombiTable1D tableID;
       input Integer icol;
       input Real u;
-      input Real tableAvailable "Dummy input to ensure correct sorting of function calls";
+      input Real tableAvailable "Dummy input to ensure correct sorting of function calls" annotation(__OpenModelica_UnusedVariable=true);
       output Real y;
     external"C" y = ModelicaStandardTables_CombiTable1D_getValue(
             tableID,
             icol,
-            u) annotation (Library={"ModelicaStandardTables", "ModelicaExternalC"});
+            u) annotation (Library={"ModelicaExternalC"});
       annotation (derivative(noDerivative=tableAvailable) = getDerTableValue);
     end getTableValue;
 
@@ -67,14 +67,14 @@
       input Modelica.Blocks.Types.ExternalCombiTable1D tableID;
       input Integer icol;
       input Real u;
-      input Real tableAvailable "Dummy input to ensure correct sorting of function calls";
+      input Real tableAvailable "Dummy input to ensure correct sorting of function calls" annotation(__OpenModelica_UnusedVariable=true);
       input Real der_u;
       output Real der_y;
     external"C" der_y = ModelicaStandardTables_CombiTable1D_getDerValue(
             tableID,
             icol,
             u,
-            der_u) annotation (Library={"ModelicaStandardTables", "ModelicaExternalC"});
+            der_u) annotation (Library={"ModelicaExternalC"});
     end getDerTableValue;
 
   initial algorithm
@@ -329,7 +329,7 @@
       input Boolean forceRead = false "= true: Force reading of table data; = false: Only read, if not yet read.";
       output Real readSuccess "Table read success";
     external"C" readSuccess = ModelicaStandardTables_CombiTable1D_read(tableID,
-        forceRead) annotation (Library={"ModelicaStandardTables", "ModelicaExternalC"});
+        forceRead) annotation (Library={"ModelicaExternalC"});
     end readTableData;
 
     function getTableValue "Interpolate 1-dim. table defined by matrix"
@@ -337,12 +337,12 @@
       input Modelica.Blocks.Types.ExternalCombiTable1D tableID;
       input Integer icol;
       input Real u;
-      input Real tableAvailable "Dummy input to ensure correct sorting of function calls";
+      input Real tableAvailable "Dummy input to ensure correct sorting of function calls" annotation(__OpenModelica_UnusedVariable=true);
       output Real y;
     external"C" y = ModelicaStandardTables_CombiTable1D_getValue(
             tableID,
             icol,
-            u) annotation (Library={"ModelicaStandardTables", "ModelicaExternalC"});
+            u) annotation (Library={"ModelicaExternalC"});
       annotation (derivative(noDerivative=tableAvailable) = getDerTableValue);
     end getTableValue;
 
@@ -352,14 +352,14 @@
       input Modelica.Blocks.Types.ExternalCombiTable1D tableID;
       input Integer icol;
       input Real u;
-      input Real tableAvailable "Dummy input to ensure correct sorting of function calls";
+      input Real tableAvailable "Dummy input to ensure correct sorting of function calls" annotation(__OpenModelica_UnusedVariable=true);
       input Real der_u;
       output Real der_y;
     external"C" der_y = ModelicaStandardTables_CombiTable1D_getDerValue(
             tableID,
             icol,
             u,
-            der_u) annotation (Library={"ModelicaStandardTables", "ModelicaExternalC"});
+            der_u) annotation (Library={"ModelicaExternalC"});
     end getDerTableValue;
 
   initial algorithm
@@ -609,7 +609,7 @@
       input Boolean forceRead = false "= true: Force reading of table data; = false: Only read, if not yet read.";
       output Real readSuccess "Table read success";
     external"C" readSuccess = ModelicaStandardTables_CombiTable2D_read(tableID,
-        forceRead) annotation (Library={"ModelicaStandardTables", "ModelicaExternalC"});
+        forceRead) annotation (Library={"ModelicaExternalC"});
     end readTableData;
 
     function getTableValue "Interpolate 2-dim. table defined by matrix"
@@ -617,12 +617,12 @@
       input Modelica.Blocks.Types.ExternalCombiTable2D tableID;
       input Real u1;
       input Real u2;
-      input Real tableAvailable "Dummy input to ensure correct sorting of function calls";
+      input Real tableAvailable "Dummy input to ensure correct sorting of function calls" annotation(__OpenModelica_UnusedVariable=true);
       output Real y;
     external"C" y = ModelicaStandardTables_CombiTable2D_getValue(
             tableID,
             u1,
-            u2) annotation (Library={"ModelicaStandardTables", "ModelicaExternalC"});
+            u2) annotation (Library={"ModelicaExternalC"});
       annotation (derivative(noDerivative=tableAvailable) = getDerTableValue);
     end getTableValue;
 
@@ -632,7 +632,7 @@
       input Modelica.Blocks.Types.ExternalCombiTable2D tableID;
       input Real u1;
       input Real u2;
-      input Real tableAvailable "Dummy input to ensure correct sorting of function calls";
+      input Real tableAvailable "Dummy input to ensure correct sorting of function calls" annotation(__OpenModelica_UnusedVariable=true);
       input Real der_u1;
       input Real der_u2;
       output Real der_y;
@@ -641,7 +641,7 @@
             u1,
             u2,
             der_u1,
-            der_u2) annotation (Library={"ModelicaStandardTables", "ModelicaExternalC"});
+            der_u2) annotation (Library={"ModelicaExternalC"});
     end getDerTableValue;
 
   initial algorithm
diff -u -x .svn -r libraries/Modelica 3.2.1/Modelica/Blocks/Types.mo build/Modelica 3.2.1/Blocks/Types.mo
--- libraries/Modelica 3.2.1/Modelica/Blocks/Types.mo	2013-05-28 09:49:37.835193042 +0200
+++ build/Modelica 3.2.1/Blocks/Types.mo	2013-05-29 12:17:11.075416886 +0200
@@ -106,13 +106,13 @@
             columns,
             size(columns, 1),
             smoothness,
-            extrapolation) annotation (Library={"ModelicaStandardTables", "ModelicaExternalC"});
+            extrapolation) annotation (Library={"ModelicaExternalC"});
     end constructor;
 
     function destructor "Terminate 1-dim. table where first column is time"
       input ExternalCombiTimeTable externalCombiTimeTable;
     external"C" ModelicaStandardTables_CombiTimeTable_close(
-        externalCombiTimeTable) annotation (Library={"ModelicaStandardTables", "ModelicaExternalC"});
+        externalCombiTimeTable) annotation (Library={"ModelicaExternalC"});
     end destructor;
 
   end ExternalCombiTimeTable;
@@ -136,13 +136,13 @@
             size(table, 2),
             columns,
             size(columns, 1),
-            smoothness) annotation (Library={"ModelicaStandardTables", "ModelicaExternalC"});
+            smoothness) annotation (Library={"ModelicaExternalC"});
     end constructor;
 
     function destructor "Terminate 1-dim. table defined by matrix"
       input ExternalCombiTable1D externalCombiTable1D;
     external"C" ModelicaStandardTables_CombiTable1D_close(externalCombiTable1D)
-        annotation (Library={"ModelicaStandardTables", "ModelicaExternalC"});
+        annotation (Library={"ModelicaExternalC"});
     end destructor;
 
   end ExternalCombiTable1D;
@@ -163,13 +163,13 @@
             table,
             size(table, 1),
             size(table, 2),
-            smoothness) annotation (Library={"ModelicaStandardTables", "ModelicaExternalC"});
+            smoothness) annotation (Library={"ModelicaExternalC"});
     end constructor;
 
     function destructor "Terminate 2-dim. table defined by matrix"
       input ExternalCombiTable2D externalCombiTable2D;
     external"C" ModelicaStandardTables_CombiTable2D_close(externalCombiTable2D)
-        annotation (Library={"ModelicaStandardTables", "ModelicaExternalC"});
+        annotation (Library={"ModelicaExternalC"});
     end destructor;
 
   end ExternalCombiTable2D;
diff -u -x .svn -r libraries/Modelica 3.2.1/Modelica/Mechanics/MultiBody/package.mo build/Modelica 3.2.1/Mechanics/MultiBody/package.mo
--- libraries/Modelica 3.2.1/Modelica/Mechanics/MultiBody/package.mo	2013-05-02 17:37:38.596157614 +0200
+++ build/Modelica 3.2.1/Mechanics/MultiBody/package.mo	2013-05-29 12:17:11.075416886 +0200
@@ -1231,6 +1231,7 @@
     "Default scaling of torque arrows (length = torque/defaultNm_to_m)"
     annotation (Dialog(tab="Defaults"));
 
+  /* adrpo: 2012-09-04 -> replace gravityAcceleration function with the one in MSL 3.1 (not replaceable)
   replaceable function gravityAcceleration =
        Modelica.Mechanics.MultiBody.Forces.Internal.standardGravityAcceleration
       (    gravityType=gravityType, g=g*Modelica.Math.Vectors.normalizeWithAssert(n), mue=mue)
@@ -1249,6 +1250,38 @@
      <a href=\"modelica://Modelica.Mechanics.MultiBody.Examples.Elementary.UserDefinedGravityField\">Examples.Elementary.UserDefinedGravityField</a>.
 </p>
 </html>"));
+*/
+
+function gravityAcceleration = gravityAccelerationTypes (
+      gravityType=gravityType,
+      g=g*Modelica.Math.Vectors.normalize(
+                                     n),
+      mue=mue);
+
+protected
+  function gravityAccelerationTypes
+    "Gravity field acceleration depending on field type and position"
+    import Modelica.Mechanics.MultiBody.Types.GravityTypes;
+    extends Modelica.Icons.Function;
+    input SI.Position r[3]
+      "Position vector from world frame to actual point, resolved in world frame";
+    input GravityTypes gravityType "Type of gravity field";
+    input SI.Acceleration g[3]
+      "Constant gravity acceleration, resolved in world frame, if gravityType=1";
+    input Real mue(unit="m3/s2")
+      "Field constant of point gravity field, if gravityType=2";
+    output SI.Acceleration gravity[3]
+      "Gravity acceleration at point r, resolved in world frame";
+  algorithm
+    gravity := if gravityType == GravityTypes.UniformGravity then g else
+               if gravityType == GravityTypes.PointGravity then
+                  -(mue/(r*r))*(r/Modelica.Math.Vectors.length(
+                                                r)) else
+                    zeros(3);
+    annotation(Inline=true);          
+  end gravityAccelerationTypes;
+
+
 
   /* The World object can only use the Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape model, but no
      other models in package Modelica.Mechanics.MultiBody.Visualizers, since the other models access
diff -u -x .svn -r libraries/Modelica 3.2.1/Modelica/Media/Water/IF97_Utilities.mo build/Modelica 3.2.1/Media/Water/IF97_Utilities.mo
--- libraries/Modelica 3.2.1/Modelica/Media/Water/IF97_Utilities.mo	2013-05-23 16:31:57.064364693 +0200
+++ build/Modelica 3.2.1/Media/Water/IF97_Utilities.mo	2013-05-29 12:17:11.075416886 +0200
@@ -7161,7 +7161,7 @@
        else region;
     aux.R := BaseIF97.data.RH2O;
     aux.p := p;
-    aux.T := T;
+    aux.T := T; /* OpenModelica patch */ aux.dpT := 0.0; aux.pt := 0.0; aux.pd := 0.0; aux.x := 0.0; aux.rho := 0.0; aux.vt := 0.0; aux.vp := 0.0; aux.cp := 0.0; /* end OpenModelica patch */
     if (aux.region == 1) then
       g := BaseIF97.Basic.g1(p, T);
       aux.h := aux.R*aux.T*g.tau*g.gtau;
Only in libraries/Modelica 3.2.1/Modelica/Resources: Library
