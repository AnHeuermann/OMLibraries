diff -u -x .svn -x .git -x Library -r git/Modelica/Modelica/Magnetic/QuasiStatic/FundamentalWave.mo "build/Modelica trunk/Magnetic/QuasiStatic/FundamentalWave.mo"
--- git/Modelica/Modelica/Magnetic/QuasiStatic/FundamentalWave.mo	2019-05-17 22:34:20.916247361 +0200
+++ build/Modelica trunk/Magnetic/QuasiStatic/FundamentalWave.mo	2019-05-17 22:34:38.692242879 +0200
@@ -1123,7 +1123,8 @@
                           fillColor={255,255,170},
                           fillPattern=FillPattern.Solid,
                           textStyle={TextStyle.Bold},
-                          textString="%m phase transient")}));
+                          textString="%m phase transient")}),
+  __OpenModelica_simulationFlags(nls = "newton"));
         end IMC_YD;
 
         model IMC_Transformer "Induction machine with squirrel cage starting with transformer"
@@ -1392,7 +1393,8 @@
                           fillColor={255,255,170},
                           fillPattern=FillPattern.Solid,
                           textStyle={TextStyle.Bold},
-                  textString="%m phase transient")}));
+                  textString="%m phase transient")}),
+  __OpenModelica_simulationFlags(nls = "newton"));
         end IMC_Transformer;
 
         model IMC_Conveyor "Induction machine with squirrel cage and inverter driving a conveyor"
diff -u -x .svn -x .git -x Library -r git/Modelica/Modelica/Math/package.mo "build/Modelica trunk/Math/package.mo"
--- git/Modelica/Modelica/Math/package.mo	2019-05-17 19:09:39.535519039 +0200
+++ build/Modelica trunk/Math/package.mo	2019-05-17 22:34:29.764244622 +0200
@@ -13220,9 +13220,67 @@
   annotation (Documentation(info="<html>
 
 </html>"),
-  obsolete = "Obsolete function");
+  obsolete = "Obsolete function",
+  derivative(zeroDerivative=table,zeroDerivative=icol)=tempInterpol1_der);
 end tempInterpol1;
 
+function tempInterpol1_der
+  "Temporary function for linear interpolation (will be removed)"
+  input Real u "input value (first column of table)";
+  input Real table[:, :] "table to be interpolated";
+  input Integer icol "column of table to be interpolated";
+  input Real du;
+  output Real dy "interpolated input value (icol column of table)";
+  protected
+  Integer i;
+  Integer n "number of rows of table";
+  Real u1;
+  Real u2;
+  Real y1;
+  Real y2;
+algorithm
+  n := size(table, 1);
+
+  if n <= 1 then
+    dy := 0;
+
+  else
+    // Search interval
+
+    if u <= table[1, 1] then
+      i := 1;
+
+    else
+      i := 2;
+      // Supports duplicate table[i, 1] values
+      // in the interior to allow discontinuities.
+      // Interior means that
+      // if table[i, 1] = table[i+1, 1] we require i>1 and i+1<n
+
+      while i < n and u >= table[i, 1] loop
+        i := i + 1;
+
+      end while;
+      i := i - 1;
+
+    end if;
+
+    // Get interpolation data
+    u1 := table[i, 1];
+    u2 := table[i + 1, 1];
+    y1 := table[i, icol];
+    y2 := table[i + 1, icol];
+
+    assert(u2 > u1, "Table index must be increasing");
+    // Interpolate
+    dy := (y2 - y1)/(u2 - u1);
+
+  end if;
+
+  annotation (Documentation(info="<html>
+
+</html>"));
+end tempInterpol1_der;
 
 function tempInterpol2
   "Temporary function for vectorized linear interpolation (will be removed)"
@@ -13283,9 +13341,72 @@
   annotation (Documentation(info="<html>
 
 </html>"),
-  obsolete = "Obsolete function");
+  obsolete = "Obsolete function",
+  derivative(zeroDerivative=table,zeroDerivative=icol)=tempInterpol2_der);
 end tempInterpol2;
 
+function tempInterpol2_der
+  "Temporary function for vectorized linear interpolation (will be removed)"
+  extends Modelica.Icons.Function;
+  extends Modelica.Icons.ObsoleteModel;
+
+  input Real u "input value (first column of table)";
+  input Real table[:, :] "table to be interpolated";
+  input Integer icol[:] "column(s) of table to be interpolated";
+  input Real du "input value (first column of table)";
+  output Real dy[1, size(icol, 1)]
+    "interpolated input value(s) (column(s) icol of table)";
+protected
+  Integer i;
+  Integer n "number of rows of table";
+  Real u1;
+  Real u2;
+  Real y1[1, size(icol, 1)];
+  Real y2[1, size(icol, 1)];
+algorithm
+  n := size(table, 1);
+
+  if n <= 1 then
+    dy := zeros(1, size(icol,1));
+
+  else
+    // Search interval
+
+    if u <= table[1, 1] then
+      i := 1;
+
+    else
+      i := 2;
+      // Supports duplicate table[i, 1] values
+      // in the interior to allow discontinuities.
+      // Interior means that
+      // if table[i, 1] = table[i+1, 1] we require i>1 and i+1<n
+
+      while i < n and u >= table[i, 1] loop
+        i := i + 1;
+
+      end while;
+      i := i - 1;
+
+    end if;
+
+    // Get interpolation data
+    u1 := table[i, 1];
+    u2 := table[i + 1, 1];
+    y1 := transpose([table[i, icol]]);
+    y2 := transpose([table[i + 1, icol]]);
+
+    assert(u2 > u1, "Table index must be increasing");
+    // Interpolate
+    dy := (y2 - y1)/(u2 - u1);
+
+  end if;
+
+  annotation (Documentation(info="<html>
+
+</html>")
+);
+end tempInterpol2_der;
 
 annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},
           {100,100}}), graphics={Line(points={{-80,0},{-68.7,34.2},{-61.5,53.1},
diff -u -x .svn -x .git -x Library -r git/Modelica/Modelica/Math/package.order "build/Modelica trunk/Math/package.order"
--- git/Modelica/Modelica/Math/package.order	2019-05-17 22:34:20.916247361 +0200
+++ build/Modelica trunk/Math/package.order	2019-05-17 22:34:29.764244622 +0200
@@ -30,4 +30,6 @@
 baseIcon1
 baseIcon2
 tempInterpol1
+tempInterpol1_der
 tempInterpol2
+tempInterpol2_der
diff -u -x .svn -x .git -x Library -r git/Modelica/Modelica/package.mo "build/Modelica trunk/package.mo"
--- git/Modelica/Modelica/package.mo	2019-05-17 22:34:20.944247351 +0200
+++ build/Modelica trunk/package.mo	2019-05-17 22:34:39.672242749 +0200
@@ -8379,12 +8379,12 @@
 
 annotation (
 preferredView="info",
-version="4.0.0-dev",
+version= "trunk",
 versionBuild=1,
 versionDate="2019-01-23",
 dateModified = "2019-01-23 12:00:00Z",
 revisionId="$Format:%h %ci$",
-uses(Complex(version="4.0.0-dev"), ModelicaServices(version="4.0.0-dev")),
+uses(Complex(version= "trunk"), ModelicaServices(version= "trunk")),
 conversion(
  from(version={"2.1", "2.2", "2.2.1", "2.2.2"}, script="modelica://Modelica/Resources/Scripts/Conversion/Dymola/ConvertModelica_from_2.2.2_to_3.0.mos"),
  from(version={"3.0", "3.0.1", "3.1", "3.2", "3.2.1", "3.2.2", "3.2.3"}, script="modelica://Modelica/Resources/Scripts/Conversion/ConvertModelica_from_3.2.3_to_4.0.0.mos")),
