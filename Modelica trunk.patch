diff -u -x .svn -x .git -x Library -r git/MSL/Modelica/Blocks/Tables.mo "build/Modelica trunk/Blocks/Tables.mo"
--- git/MSL/Modelica/Blocks/Tables.mo	2016-02-26 10:29:45.198890323 +0100
+++ build/Modelica trunk/Blocks/Tables.mo	2016-02-26 16:30:32.153690581 +0100
@@ -1,4 +1,5 @@
 within Modelica.Blocks;
+
 package Tables
   "Library of blocks to interpolate in one and two-dimensional tables"
   extends Modelica.Icons.Package;
@@ -790,7 +791,7 @@
       input Integer icol;
       input Real u;
       input Real tableAvailable
-        "Dummy input to ensure correct sorting of function calls";
+        "Dummy input to ensure correct sorting of function calls" annotation(__OpenModelica_UnusedVariable = true);
       output Real y;
       external"C" y = ModelicaStandardTables_CombiTable1D_getValue(tableID, icol, u)
         annotation (Library={"ModelicaStandardTables", "ModelicaMatIO", "zlib"});
@@ -804,7 +805,7 @@
       input Integer icol;
       input Real u;
       input Real tableAvailable
-        "Dummy input to ensure correct sorting of function calls";
+        "Dummy input to ensure correct sorting of function calls" annotation(__OpenModelica_UnusedVariable = true);
       input Real der_u;
       output Real der_y;
       external"C" der_y = ModelicaStandardTables_CombiTable1D_getDerValue(tableID, icol, u, der_u)
@@ -818,7 +819,7 @@
       input Integer icol;
       input Real u;
       input Real tableAvailable
-        "Dummy input to ensure correct sorting of function calls";
+        "Dummy input to ensure correct sorting of function calls" annotation(__OpenModelica_UnusedVariable = true);
       output Real y;
       external"C" y = ModelicaStandardTables_CombiTable1D_getValue(tableID, icol, u)
         annotation (Library={"ModelicaStandardTables", "ModelicaMatIO", "zlib"});
@@ -843,7 +844,7 @@
         input Real u1;
         input Real u2;
         input Real tableAvailable
-          "Dummy input to ensure correct sorting of function calls";
+          "Dummy input to ensure correct sorting of function calls" annotation(__OpenModelica_UnusedVariable = true);
         output Real y;
         external"C" y = ModelicaStandardTables_CombiTable2D_getValue(tableID, u1, u2)
           annotation (Library={"ModelicaStandardTables", "ModelicaMatIO", "zlib"});
@@ -857,7 +858,7 @@
         input Real u1;
         input Real u2;
         input Real tableAvailable
-          "Dummy input to ensure correct sorting of function calls";
+          "Dummy input to ensure correct sorting of function calls" annotation(__OpenModelica_UnusedVariable = true);
         input Real der_u1;
         input Real der_u2;
         output Real der_y;
@@ -872,7 +873,7 @@
         input Real u1;
         input Real u2;
         input Real tableAvailable
-          "Dummy input to ensure correct sorting of function calls";
+          "Dummy input to ensure correct sorting of function calls" annotation(__OpenModelica_UnusedVariable = true);
         output Real y;
         external"C" y = ModelicaStandardTables_CombiTable2D_getValue(tableID, u1, u2)
           annotation (Library={"ModelicaStandardTables", "ModelicaMatIO", "zlib"});
@@ -901,7 +902,7 @@
       discrete input Modelica.SIunits.Time nextTimeEvent;
       discrete input Modelica.SIunits.Time pre_nextTimeEvent;
       input Real tableAvailable
-        "Dummy input to ensure correct sorting of function calls";
+        "Dummy input to ensure correct sorting of function calls" annotation(__OpenModelica_UnusedVariable = true);
       output Real y;
       external"C" y = ModelicaStandardTables_CombiTimeTable_getValue(tableID, icol, timeIn, nextTimeEvent, pre_nextTimeEvent)
         annotation (Library={"ModelicaStandardTables", "ModelicaMatIO", "zlib"});
@@ -920,7 +921,7 @@
       discrete input Modelica.SIunits.Time nextTimeEvent;
       discrete input Modelica.SIunits.Time pre_nextTimeEvent;
       input Real tableAvailable
-        "Dummy input to ensure correct sorting of function calls";
+        "Dummy input to ensure correct sorting of function calls" annotation(__OpenModelica_UnusedVariable = true);
       input Real der_timeIn;
       output Real der_y;
       external"C" der_y = ModelicaStandardTables_CombiTimeTable_getDerValue(tableID, icol, timeIn, nextTimeEvent, pre_nextTimeEvent, der_timeIn)
@@ -936,7 +937,7 @@
       discrete input Modelica.SIunits.Time nextTimeEvent;
       discrete input Modelica.SIunits.Time pre_nextTimeEvent;
       input Real tableAvailable
-        "Dummy input to ensure correct sorting of function calls";
+        "Dummy input to ensure correct sorting of function calls" annotation(__OpenModelica_UnusedVariable = true);
       output Real y;
       external"C" y = ModelicaStandardTables_CombiTimeTable_getValue(tableID, icol, timeIn, nextTimeEvent, pre_nextTimeEvent)
         annotation (Library={"ModelicaStandardTables", "ModelicaMatIO", "zlib"});
@@ -947,7 +948,7 @@
       extends Modelica.Icons.Function;
       input Modelica.Blocks.Types.ExternalCombiTimeTable tableID;
       input Real tableAvailable
-        "Dummy input to ensure correct sorting of function calls";
+        "Dummy input to ensure correct sorting of function calls" annotation(__OpenModelica_UnusedVariable = true);
       output Modelica.SIunits.Time timeMin "Minimum time value in table";
       external"C" timeMin = ModelicaStandardTables_CombiTimeTable_minimumTime(tableID)
         annotation (Library={"ModelicaStandardTables", "ModelicaMatIO", "zlib"});
@@ -958,7 +959,7 @@
       extends Modelica.Icons.Function;
       input Modelica.Blocks.Types.ExternalCombiTimeTable tableID;
       input Real tableAvailable
-        "Dummy input to ensure correct sorting of function calls";
+        "Dummy input to ensure correct sorting of function calls" annotation(__OpenModelica_UnusedVariable = true);
       output Modelica.SIunits.Time timeMax "Maximum time value in table";
       external"C" timeMax = ModelicaStandardTables_CombiTimeTable_maximumTime(tableID)
         annotation (Library={"ModelicaStandardTables", "ModelicaMatIO", "zlib"});
@@ -970,7 +971,7 @@
       input Modelica.Blocks.Types.ExternalCombiTimeTable tableID;
       input Modelica.SIunits.Time timeIn;
       input Real tableAvailable
-        "Dummy input to ensure correct sorting of function calls";
+        "Dummy input to ensure correct sorting of function calls" annotation(__OpenModelica_UnusedVariable = true);
       output Modelica.SIunits.Time nextTimeEvent "Next time event in table";
       external"C" nextTimeEvent = ModelicaStandardTables_CombiTimeTable_nextTimeEvent(tableID, timeIn)
         annotation (Library={"ModelicaStandardTables", "ModelicaMatIO", "zlib"});
@@ -1042,4 +1043,4 @@
         Line(
           points={{24,74},{24,-76}},
           color={95,95,95})}));
-end Tables;
+end Tables;
\ No newline at end of file
diff -u -x .svn -x .git -x Library -r git/MSL/Modelica/Math/package.mo "build/Modelica trunk/Math/package.mo"
--- git/MSL/Modelica/Math/package.mo	2016-02-26 10:29:45.242891884 +0100
+++ build/Modelica trunk/Math/package.mo	2016-02-26 16:30:25.893474941 +0100
@@ -13173,9 +13173,67 @@
 
   annotation (Documentation(info="<html>
 
-</html>"));
+</html>"),
+derivative(zeroDerivative=table,zeroDerivative=icol)=tempInterpol1_der);
 end tempInterpol1;
 
+function tempInterpol1_der
+  "Temporary function for linear interpolation (will be removed)"
+  input Real u "input value (first column of table)";
+  input Real table[:, :] "table to be interpolated";
+  input Integer icol "column of table to be interpolated";
+  input Real du;
+  output Real dy "interpolated input value (icol column of table)";
+  protected 
+  Integer i;
+  Integer n "number of rows of table";
+  Real u1;
+  Real u2;
+  Real y1;
+  Real y2;
+algorithm 
+  n := size(table, 1);
+
+  if n <= 1 then
+    dy := 0;
+
+  else
+    // Search interval
+
+    if u <= table[1, 1] then
+      i := 1;
+
+    else
+      i := 2;
+      // Supports duplicate table[i, 1] values
+      // in the interior to allow discontinuities.
+      // Interior means that
+      // if table[i, 1] = table[i+1, 1] we require i>1 and i+1<n
+
+      while i < n and u >= table[i, 1] loop
+        i := i + 1;
+
+      end while;
+      i := i - 1;
+
+    end if;
+
+    // Get interpolation data
+    u1 := table[i, 1];
+    u2 := table[i + 1, 1];
+    y1 := table[i, icol];
+    y2 := table[i + 1, icol];
+
+    assert(u2 > u1, "Table index must be increasing");
+    // Interpolate
+    dy := (y2 - y1)/(u2 - u1);
+ 
+  end if;
+
+  annotation (Documentation(info="<html>
+
+</html>"));
+end tempInterpol1_der;
 
 function tempInterpol2
   "Temporary function for vectorized linear interpolation (will be removed)"
@@ -13235,9 +13293,74 @@
 
   annotation (Documentation(info="<html>
 
-</html>"));
+</html>"),
+derivative(zeroDerivative=table,zeroDerivative=icol)=tempInterpol2_der);
 end tempInterpol2;
 
+function tempInterpol2_der
+  "Temporary function for vectorized linear interpolation (will be removed)"
+  extends Modelica.Icons.Function;
+  extends Modelica.Icons.ObsoleteModel;
+
+  input Real u "input value (first column of table)";
+  input Real table[:, :] "table to be interpolated";
+  input Integer icol[:] "column(s) of table to be interpolated";
+  input Real du "input value (first column of table)";
+  output Real dy[1, size(icol, 1)]
+    "interpolated input value(s) (column(s) icol of table)";
+protected
+  Integer i;
+  Integer n "number of rows of table";
+  Real u1;
+  Real u2;
+  Real y1[1, size(icol, 1)];
+  Real y2[1, size(icol, 1)];
+algorithm
+  n := size(table, 1);
+
+  if n <= 1 then
+    dy := zeros(1, size(icol,1));
+
+  else
+    // Search interval
+
+    if u <= table[1, 1] then
+      i := 1;
+
+    else
+      i := 2;
+      // Supports duplicate table[i, 1] values
+      // in the interior to allow discontinuities.
+      // Interior means that
+      // if table[i, 1] = table[i+1, 1] we require i>1 and i+1<n
+
+      while i < n and u >= table[i, 1] loop
+        i := i + 1;
+
+      end while;
+      i := i - 1;
+
+    end if;
+
+    // Get interpolation data
+    u1 := table[i, 1];
+    u2 := table[i + 1, 1];
+    y1 := transpose([table[i, icol]]);
+    y2 := transpose([table[i + 1, icol]]);
+
+    assert(u2 > u1, "Table index must be increasing");
+    // Interpolate
+    dy := (y2 - y1)/(u2 - u1);
+
+  end if;
+
+  annotation (Documentation(info="<html>
+
+</html>")
+);
+end tempInterpol2_der;
+
+
 
 annotation (Icon(coordinateSystem(preserveAspectRatio=true, extent={{-100,-100},
           {100,100}}), graphics={Line(points={{-80,0},{-68.7,34.2},{-61.5,53.1},
diff -u -x .svn -x .git -x Library -r git/MSL/Modelica/Math/package.order "build/Modelica trunk/Math/package.order"
--- git/MSL/Modelica/Math/package.order	2016-02-26 10:29:45.242891884 +0100
+++ build/Modelica trunk/Math/package.order	2016-02-26 16:30:25.893474941 +0100
@@ -28,4 +28,6 @@
 baseIcon1
 baseIcon2
 tempInterpol1
+tempInterpol1_der
 tempInterpol2
+tempInterpol2_der
diff -u -x .svn -x .git -x Library -r git/MSL/Modelica/package.mo "build/Modelica trunk/package.mo"
--- git/MSL/Modelica/package.mo	2016-02-26 10:29:45.370896424 +0100
+++ build/Modelica trunk/package.mo	2016-02-26 16:30:32.729710422 +0100
@@ -1,4 +1,5 @@
 within ;
+
 package Modelica "Modelica Standard Library - Version 3.2.2"
 extends Modelica.Icons.Package;
 
@@ -8042,12 +8043,12 @@
 
 annotation (
 preferredView="info",
-version="3.2.2",
+version= "trunk",
 versionBuild=0,
 versionDate="2016-03-11",
 dateModified = "2016-03-11 08:44:41Z",
 revisionId="$Id::                                       $",
-uses(Complex(version="3.2.2"), ModelicaServices(version="3.2.2")),
+uses(Complex(version= "trunk"), ModelicaServices(version= "trunk")),
 conversion(
  noneFromVersion="3.2.1",
  noneFromVersion="3.2",
@@ -8130,4 +8131,4 @@
 <b>Modelica&reg;</b> is a registered trademark of the Modelica Association.
 </p>
 </html>"));
-end Modelica;
+end Modelica;
\ No newline at end of file
